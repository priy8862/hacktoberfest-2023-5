Given an array A[] of N integers. The task is to partition the array into four non-empty contiguous subarrays P, Q, R, and S such that each element of the array A[] should be present in any subarray.
Let W, X, Y, and Z be the sum of the elements in P, Q, R, and S respectively.
Find the smallest absolute difference between the maximum and the minimum among W, X, Y, and Z.

Example 1:

Input:
N = 5
A[] = [4,2,2,5,1]
Output: 4
Explanation: let partition the array 
P,Q,R,S = [4],[2,2],[5],[1]
W = 4, X = 4, Y = 5, Z = 1 
Differnce = max(W,X,Y,Z)-min(W,X,Y,Z)= 5-1 = 4 






def minimizeDifference(A):
    N = len(A)

    # Calculate the prefix and suffix sums of the array
    prefix_sum = [0] * N
    suffix_sum = [0] * N

    prefix_sum[0] = A[0]
    suffix_sum[N - 1] = A[N - 1]

    for i in range(1, N):
        prefix_sum[i] = prefix_sum[i - 1] + A[i]
        suffix_sum[N - i - 1] = suffix_sum[N - i] + A[N - i - 1]

    min_diff = float('inf')

    for i in range(1, N - 2):
        for j in range(i + 1, N - 1):
            for k in range(j + 1, N):
                P = prefix_sum[i]
                Q = prefix_sum[j] - prefix_sum[i]
                R = prefix_sum[k] - prefix_sum[j]
                S = prefix_sum[N - 1] - prefix_sum[k]

                max_val = max(P, Q, R, S)
                min_val = min(P, Q, R, S)

                min_diff = min(min_diff, max_val - min_val)

    return min_diff

# Example usage:
if __name__ == "__main__":
    A = [4, 2, 2, 5, 1]
    result = minimizeDifference(A)
    print(result)  # Output: 4
